/**
* This file is generated by 'protoapi'
* The file contains frontend API code that work with the library 'axios', therefore, it's required that 'axios' is installed in the project
* The generated code is written in TypeScript
* The code provides a basic usage for API call and may need adjustment according to specific project requirement and situation
* -------------------------------------------
* 该文件生成于protoapi
* 文件包含前端调用API的代码，并使用第三方库axios， 因此需要保证axios存在于项目中
* 文件内代码使用TypeScript
* 该生成文件只提供前端API调用基本代码，实际情况可能需要根据具体项目具体要求不同而作出更改
*/
import axios, { AxiosPromise } from 'axios';
import {
    EnvListRequest,
    EnvListResponse,
    KVHistoryRequest,
    KVHistoryResponse,
    KeyListRequest,
    KeyListResponse,
    KeyValueListRequest,
    KeyValueListResponse,
    KeyValueRequest,
    KeyValueResponse,
    ProductListRequest,
    ProductListResponse,
    RegisterServiceRequest,
    RegisterServiceResponse,
    SearchKeyValueListRequest,
    ServiceListRequest,
    ServiceListResponse,
    ServiceSearchRequest,
    TagListRequest,
    TagListResponse,
    UpdateServiceRequest,
    UpdateServiceResponse,
    UploadProtoFileRequest,
    UploadProtoFileResponse,
    
} from './AppServiceObjs';
import { generateUrl, errorHandling } from './helper';

var baseUrl = "http://192.168.115.60:8080";

export function SetBaseUrl(url: string) {
    baseUrl = url;
}
// use axios
export function getEnv(params: EnvListRequest): Promise<EnvListResponse | never> {
    const url: string = generateUrl(baseUrl, "AppService", "getEnv");
    const config = {
        "transformResponse" : [function transformResponse(data) {
            return data;
        }],
        headers: {'X-Requested-With': 'XMLHttpRequest'}
    };

    return axios.post(url, params, config)
        .catch(err => {
            // handle error response
            return errorHandling(err)
        }).then(res => {
            if (typeof res.data === 'string') {
                try {
                    const data = JSON.parse(res.data);

                    return Promise.resolve(data as EnvListResponse)
                } catch (e) {
                    return Promise.reject(res.data);
                }
            }

            return Promise.reject(res.data);
        });
}

export function registerService(params: RegisterServiceRequest): Promise<RegisterServiceResponse | never> {
    const url: string = generateUrl(baseUrl, "AppService", "registerService");
    const config = {
        "transformResponse" : [function transformResponse(data) {
            return data;
        }],
        headers: {'X-Requested-With': 'XMLHttpRequest'}
    };

    return axios.post(url, params, config)
        .catch(err => {
            // handle error response
            return errorHandling(err)
        }).then(res => {
            if (typeof res.data === 'string') {
                try {
                    const data = JSON.parse(res.data);

                    return Promise.resolve(data as RegisterServiceResponse)
                } catch (e) {
                    return Promise.reject(res.data);
                }
            }

            return Promise.reject(res.data);
        });
}

export function updateService(params: UpdateServiceRequest): Promise<UpdateServiceResponse | never> {
    const url: string = generateUrl(baseUrl, "AppService", "updateService");
    const config = {
        "transformResponse" : [function transformResponse(data) {
            return data;
        }],
        headers: {'X-Requested-With': 'XMLHttpRequest'}
    };

    return axios.post(url, params, config)
        .catch(err => {
            // handle error response
            return errorHandling(err)
        }).then(res => {
            if (typeof res.data === 'string') {
                try {
                    const data = JSON.parse(res.data);

                    return Promise.resolve(data as UpdateServiceResponse)
                } catch (e) {
                    return Promise.reject(res.data);
                }
            }

            return Promise.reject(res.data);
        });
}

export function uploadProtoFile(params: UploadProtoFileRequest): Promise<UploadProtoFileResponse | never> {
    const url: string = generateUrl(baseUrl, "AppService", "uploadProtoFile");
    const config = {
        "transformResponse" : [function transformResponse(data) {
            return data;
        }],
        headers: {'X-Requested-With': 'XMLHttpRequest'}
    };

    return axios.post(url, params, config)
        .catch(err => {
            // handle error response
            return errorHandling(err)
        }).then(res => {
            if (typeof res.data === 'string') {
                try {
                    const data = JSON.parse(res.data);

                    return Promise.resolve(data as UploadProtoFileResponse)
                } catch (e) {
                    return Promise.reject(res.data);
                }
            }

            return Promise.reject(res.data);
        });
}

export function getTags(params: TagListRequest): Promise<TagListResponse | never> {
    const url: string = generateUrl(baseUrl, "AppService", "getTags");
    const config = {
        "transformResponse" : [function transformResponse(data) {
            return data;
        }],
        headers: {'X-Requested-With': 'XMLHttpRequest'}
    };

    return axios.post(url, params, config)
        .catch(err => {
            // handle error response
            return errorHandling(err)
        }).then(res => {
            if (typeof res.data === 'string') {
                try {
                    const data = JSON.parse(res.data);

                    return Promise.resolve(data as TagListResponse)
                } catch (e) {
                    return Promise.reject(res.data);
                }
            }

            return Promise.reject(res.data);
        });
}

export function getProducts(params: ProductListRequest): Promise<ProductListResponse | never> {
    const url: string = generateUrl(baseUrl, "AppService", "getProducts");
    const config = {
        "transformResponse" : [function transformResponse(data) {
            return data;
        }],
        headers: {'X-Requested-With': 'XMLHttpRequest'}
    };

    return axios.post(url, params, config)
        .catch(err => {
            // handle error response
            return errorHandling(err)
        }).then(res => {
            if (typeof res.data === 'string') {
                try {
                    const data = JSON.parse(res.data);

                    return Promise.resolve(data as ProductListResponse)
                } catch (e) {
                    return Promise.reject(res.data);
                }
            }

            return Promise.reject(res.data);
        });
}

export function getServices(params: ServiceListRequest): Promise<ServiceListResponse | never> {
    const url: string = generateUrl(baseUrl, "AppService", "getServices");
    const config = {
        "transformResponse" : [function transformResponse(data) {
            return data;
        }],
        headers: {'X-Requested-With': 'XMLHttpRequest'}
    };

    return axios.post(url, params, config)
        .catch(err => {
            // handle error response
            return errorHandling(err)
        }).then(res => {
            if (typeof res.data === 'string') {
                try {
                    const data = JSON.parse(res.data);

                    return Promise.resolve(data as ServiceListResponse)
                } catch (e) {
                    return Promise.reject(res.data);
                }
            }

            return Promise.reject(res.data);
        });
}

export function searchServices(params: ServiceSearchRequest): Promise<ServiceListResponse | never> {
    const url: string = generateUrl(baseUrl, "AppService", "searchServices");
    const config = {
        "transformResponse" : [function transformResponse(data) {
            return data;
        }],
        headers: {'X-Requested-With': 'XMLHttpRequest'}
    };

    return axios.post(url, params, config)
        .catch(err => {
            // handle error response
            return errorHandling(err)
        }).then(res => {
            if (typeof res.data === 'string') {
                try {
                    const data = JSON.parse(res.data);

                    return Promise.resolve(data as ServiceListResponse)
                } catch (e) {
                    return Promise.reject(res.data);
                }
            }

            return Promise.reject(res.data);
        });
}

export function getKeyList(params: KeyListRequest): Promise<KeyListResponse | never> {
    const url: string = generateUrl(baseUrl, "AppService", "getKeyList");
    const config = {
        "transformResponse" : [function transformResponse(data) {
            return data;
        }],
        headers: {'X-Requested-With': 'XMLHttpRequest'}
    };

    return axios.post(url, params, config)
        .catch(err => {
            // handle error response
            return errorHandling(err)
        }).then(res => {
            if (typeof res.data === 'string') {
                try {
                    const data = JSON.parse(res.data);

                    return Promise.resolve(data as KeyListResponse)
                } catch (e) {
                    return Promise.reject(res.data);
                }
            }

            return Promise.reject(res.data);
        });
}

export function getKeyValueList(params: KeyValueListRequest): Promise<KeyValueListResponse | never> {
    const url: string = generateUrl(baseUrl, "AppService", "getKeyValueList");
    const config = {
        "transformResponse" : [function transformResponse(data) {
            return data;
        }],
        headers: {'X-Requested-With': 'XMLHttpRequest'}
    };

    return axios.post(url, params, config)
        .catch(err => {
            // handle error response
            return errorHandling(err)
        }).then(res => {
            if (typeof res.data === 'string') {
                try {
                    const data = JSON.parse(res.data);

                    return Promise.resolve(data as KeyValueListResponse)
                } catch (e) {
                    return Promise.reject(res.data);
                }
            }

            return Promise.reject(res.data);
        });
}

export function searchKeyValueList(params: SearchKeyValueListRequest): Promise<KeyValueListResponse | never> {
    const url: string = generateUrl(baseUrl, "AppService", "searchKeyValueList");
    const config = {
        "transformResponse" : [function transformResponse(data) {
            return data;
        }],
        headers: {'X-Requested-With': 'XMLHttpRequest'}
    };

    return axios.post(url, params, config)
        .catch(err => {
            // handle error response
            return errorHandling(err)
        }).then(res => {
            if (typeof res.data === 'string') {
                try {
                    const data = JSON.parse(res.data);

                    return Promise.resolve(data as KeyValueListResponse)
                } catch (e) {
                    return Promise.reject(res.data);
                }
            }

            return Promise.reject(res.data);
        });
}

export function updateKeyValue(params: KeyValueRequest): Promise<KeyValueResponse | never> {
    const url: string = generateUrl(baseUrl, "AppService", "updateKeyValue");
    const config = {
        "transformResponse" : [function transformResponse(data) {
            return data;
        }],
        headers: {'X-Requested-With': 'XMLHttpRequest'}
    };

    return axios.post(url, params, config)
        .catch(err => {
            // handle error response
            return errorHandling(err)
        }).then(res => {
            if (typeof res.data === 'string') {
                try {
                    const data = JSON.parse(res.data);

                    return Promise.resolve(data as KeyValueResponse)
                } catch (e) {
                    return Promise.reject(res.data);
                }
            }

            return Promise.reject(res.data);
        });
}

export function fetchKeyHistory(params: KVHistoryRequest): Promise<KVHistoryResponse | never> {
    const url: string = generateUrl(baseUrl, "AppService", "fetchKeyHistory");
    const config = {
        "transformResponse" : [function transformResponse(data) {
            return data;
        }],
        headers: {'X-Requested-With': 'XMLHttpRequest'}
    };

    return axios.post(url, params, config)
        .catch(err => {
            // handle error response
            return errorHandling(err)
        }).then(res => {
            if (typeof res.data === 'string') {
                try {
                    const data = JSON.parse(res.data);

                    return Promise.resolve(data as KVHistoryResponse)
                } catch (e) {
                    return Promise.reject(res.data);
                }
            }

            return Promise.reject(res.data);
        });
}
