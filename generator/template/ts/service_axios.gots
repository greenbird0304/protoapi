/**
* This file is generated by 'protoapi'
* The file contains frontend API code that work with the library 'axios', therefore, it's required that 'axios' is installed in the project
* The generated code is written in TypeScript
* The code provides a basic usage for API call and may need adjustment according to specific project requirement and situation
* -------------------------------------------
* 该文件生成于protoapi
* 文件包含前端调用API的代码，并使用第三方库axios， 因此需要保证axios存在于项目中
* 文件内代码使用TypeScript
* 该生成文件只提供前端API调用基本代码，实际情况可能需要根据具体项目具体要求不同而作出更改
*/
import axios, { AxiosResponse, AxiosRequestConfig } from 'axios';
import {
    {{range $type, $bool := (getImportDataTypes .Functions)}}
    {{- $type }},
    {{end}}
} from './{{.ClassName}}Objs';
import { generateUrl, errorHandling } from './helper';

type Methods = "get" | "head" | "options" | "delete" | "post" | "put" | "patch"

let baseUrl = "http://192.168.115.60:8080";

export const SetBaseUrl: (url: string) => string = (url) => {
    baseUrl = url;
	return url;
}

const axiosResponseHandler: <T = any>(response: AxiosResponse<T>) => T
= (response) => {
    const res_data = response.data
	if (typeof res_data === 'string') {
		try {
			return JSON.parse(res_data);
		} catch (e) {
			throw res_data;
		}
	}
    throw res_data;
}

const axiosHandler: (url: string, method: Methods, params: any) => Promise<any>
= (url, method, params) => {
    const config: AxiosRequestConfig = {
        transformResponse : (data) => data,
        headers: {"X-Requested-With": "XMLHttpRequest"}
    };
    const methodsAcceptData = ["post", "put", "patch"].includes(method)
    const axiosParams = methodsAcceptData ? params : undefined;
    if (!methodsAcceptData && !!params){
        config.params = params
    }
    const promise = methodsAcceptData
        ? axios[method as "post" | "put" | "patch"](url, axiosParams, config)
        : axios[method as "get" | "head" | "options" | "delete"].get(url, config);
    
    return promise
    .catch(err => {
        return errorHandling(err)
    })
    .then(res => {
        try {
            const resolved_data = axiosResponseHandler(res);
            return Promise.resolve(resolved_data);
        } catch (e) {
            return Promise.reject(res.data);
        }
    });
}

{{- $className := .ClassName -}}
{{- range .Functions}}
{{- $method := "post" -}}
{{- if eq (getServiceMtd .Options) "GET" -}}
    {{- $method := "get" -}}
{{end}}
{{- $error :=  (getErrorType .Options) }}

export function {{.Name}}(params: {{.InputType}}): Promise<{{.OutputType}} | never> {
    const url: string = generateUrl(baseUrl, "{{$className}}", "{{.Name}}");
    return axiosHandler(url, "{{$method}}", params) as Promise<{{.OutputType}}>;
}
{{end -}}
